# firewall_multi
<!-- DO NOT EDIT: This document was generated by docs.rb -->
<%
  require 'puppet-strings'
  temp_file = '/tmp/REF.md'

  PuppetStrings::generate(
    [
      'manifests/init.pp',
      'lib/puppet/functions/firewall_multi.rb',
    ],
    {
      :path=>temp_file,
      :markdown=>true,
    }
  )

  # md used below in #reference section.
  #
  md = ''
  File.open(temp_file, 'r') do |f|
    keep = true
    f.each_line.with_index do |line,i|
      next if i < 5
      keep = false if line =~ /#.*ensure/
      keep = true if line =~ /#.*Functions/
      line = '#' + line if line =~ /^#/
      md += line if keep
    end
  end
-%>

[![Build Status](https://img.shields.io/travis/alexharv074/puppet-firewall_multi.svg)](https://travis-ci.org/alexharv074/puppet-firewall_multi)

#### Table of contents

1. [Overview](#overview)
2. [Version compatibility](#version-compatibility)
3. [Setup](#setup)
    * [What firewall_multi affects](#what-firewall-multi-affects)
    * [Setup requirements](#setup-requirements)
    * [Beginning with firewall_multi](#beginning-with-firewall-multi)
    * [Upgrading](#upgrading)
4. [Reference](#reference)
    * [Defined types](#defined-types)
        - [firewall_multi](#firewall-multi)
    * [Functions](#functions)
        - [firewall_multi](#firewall-multi)
    * [Use with Hiera](#use-with-hiera)
    * [The alias lookup](#the-alias-lookup)
5. [Known Issues](#known-issues)
6. [Development](#development)
    * [Testing](#testing)
    * [Release](#release)

## Overview

The `firewall_multi` module provides a defined type wrapper for spawning [puppetlabs/firewall](https://github.com/puppetlabs/puppetlabs-firewall) resources for arrays of certain inputs. This is useful at large sites that may have many networks, due to the puppetlabs-firewall module lacking functionality to allow arrays for certain inputs. The limitation is due to the underlying Linux iptables command, which also only allows arrays for certain inputs.

(For more information about the history and motivation for this project, see [MODULES-3066](https://tickets.puppetlabs.com/browse/MODULES-3066) in the Puppet Jira.)

At present the following inputs can be arrays:

<%= %x{awk '/@param/ {print "*", $4}' manifests/init.pp} -%>

## Version compatibility

Each release of the firewall_multi module is compatible with a specific release of puppetlabs-firewall, starting at firewall v1.8.0. Earlier versions of the firewall module are not supported.

firewall_multi|firewall
--------------|--------
earlier|1.8.0
1.7.0|1.8.0
1.7.0|1.8.1
1.8.0|1.8.2
1.9.0|1.9.0
1.10.1|1.10.0
1.10.1|1.11.0
1.10.1|1.12.0

## Setup

### What firewall_multi affects

The scope is the same as with the firewall module.

### Setup requirements

The firewall_multi module's only dependency is the firewall module.

### Beginning with firewall_multi

It is expected that a standard set up for the firewall module is followed, in particular with respect to the purging of firewall resources. If a user of this module, for instance, removes addresses from an array of sources, the corresponding firewall resources will only be removed if purging is enabled. This might be surprising to the user in a way that impacts security.

Otherwise, usage of the firewall_multi defined type is the same as with the firewall custom type, the only exceptions being that some parameters optionally accept arrays.

### Upgrading

Firstly, ensure you have read the version compatibility matrix section above before upgrading as versions of this module sometimes must be kept in sync with the firewall module.

To upgrade the module, use the puppet module tool as normal:

~~~ text
puppet module upgrade alexharvey/firewall_multi
~~~

## Reference

<%= md -%>

### Use with Hiera

Some users may prefer to externalise the firewall resources in Hiera:

```yaml
---
myclass::firewall_multis:
  '00099 accept tcp port 22 for ssh':
    dport: '22'
    action: 'accept'
    proto: 'tcp'
    source:
      - 10.0.0.3/32
      - 10.10.0.0/26
```

Meanwhile we would have manifest code that looks something like this:

Puppet 3.x or higher, where we can use the `create_resources` function:

```puppet
class myclass (
  $firewall_multis,
) {
  validate_hash($firewall_multis)
  create_resources(firewall_multi, $firewall_multis)
  ...
}
```

And in Puppet >= 4.x, we can use iteration:

```puppet
class myclass (
  Hash $firewall_multis,
) {
  $firewall_multis.each |$name, $firewall_multi| {
    firewall_multi { $name:
      * => $firewall_multi
    }
  }
  ...
}
```

### The alias lookup

Users who wish to externalise the firewall resources in Hiera should be aware of a feature that was added to Hiera in version 3, namely the [alias lookup function](https://docs.puppet.com/hiera/3.0/variables.html#the-alias-lookup-function), which makes it possible to define networks as arrays in Hiera and then look these up from within the `firewall_multi` definitions.

The following examples show how to do that:

```yaml
---
mylocaldomains:
  - 10.0.0.3/32
  - 10.10.0.0/26
myotherdomains:
  - 172.0.1.0/26

myclass::firewall_multis:
  '00099 accept tcp port 22 for ssh':
    dport: '22'
    action: 'accept'
    proto: 'tcp'
    source: "%{alias('mylocaldomains')}"
  '00200 accept tcp port 80 for http':
    dport: '80'
    action: 'accept'
    proto: 'tcp'
    source: "%{alias('myotherdomains')}"
```

## Known Issues

If you are using Puppet 3.x please understand the implications of [Issue #5](https://github.com/alexharv074/puppet-firewall_multi/issues/5).

This module does not sanity-check the proposed inputs for the resultant firewall resources.  We assume that we can rely on the firewall resource types themselves to detect invalid inputs.

## Development

Please read CONTRIBUTING.md before contributing.

### Testing

Make sure you have:

* rake
* bundler

Install the necessary gems:

    bundle install

To run the tests from the root of the source code:

    bundle exec rake spec

To run the acceptance tests:

    BEAKER_set=centos-72-x64 bundle exec rspec spec/acceptance

### Release

This module uses Puppet Blacksmith to publish to the Puppet Forge.

Ensure you have these lines in `~/.bash_profile`:

    export BLACKSMITH_FORGE_URL=https://forgeapi.puppetlabs.com
    export BLACKSMITH_FORGE_USERNAME=alexharvey
    export BLACKSMITH_FORGE_PASSWORD=xxxxxxxxx

Build the module:

    bundle exec rake build

Push to Forge:

    bundle exec rake module:push

Clean the pkg dir (otherwise Blacksmith will try to push old copies to Forge next time you run it and it will fail):

    bundle exec rake module:clean
